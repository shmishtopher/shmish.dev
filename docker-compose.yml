services:
  portfolio:
    image: ghcr.io/shmishtopher/shmish.dev-application:master
    container_name: portfolio
    restart: always
    depends_on:
      - postgres
    environment:
      SESSION_SECRET: ${SESSION_SECRET}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
      GH_TOKEN: ${GH_TOKEN}
      GH_CLIENT_SECRET: ${GH_CLIENT_SECRET}
      GH_CLIENT_ID: ${GH_CLIENT_ID}

    labels:
      # Enable traefik
      - "traefik.enable=true"

      # Define HTTP router
      - "traefik.http.routers.portfolio-insecure.rule=Host(`${HOSTNAME}`)"
      - "traefik.http.routers.portfolio-insecure.entrypoints=http"
      - "traefik.http.routers.portfolio-insecure.middlewares=portfolio-redirect"

      # Redirect HTTP traffic to HTTPS
      - "traefik.http.middlewares.portfolio-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.portfolio-redirect.redirectscheme.permanent=true"

      # Define HTTPS router
      - "traefik.http.routers.portfolio.rule=Host(`${HOSTNAME}`)"
      - "traefik.http.routers.portfolio.entrypoints=https"
      - "traefik.http.routers.portfolio.tls=true"
      - "traefik.http.routers.portfolio.tls.certresolver=cert"

      # Add the service
      - "traefik.http.services.portfolio.loadbalancer.server.port=3000"

  postgres:
    image: ghcr.io/shmishtopher/shmish.dev-database:master
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    volumes:
      - db-data:/var/lib/postgresql/data
    labels:
      # Enable traefik
      - "traefik.enable=true"

      # Define psql router
      - "traefik.tcp.routers.postgres.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.postgres.entrypoints=psql"

      # Add the service
      - "traefik.tcp.services.postgres.loadbalancer.server.port=5432"

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DEFAULT_DRIVER: pgsql
      ADMINER_DEFAULT_USER: admin
    labels:
      # Enable traefik
      - "traefik.enable=true"

      # Define HTTP router
      - "traefik.http.routers.adminer-insecure.rule=Host(`${HOSTNAME}`) && PathPrefix(`/admin`)"
      - "traefik.http.routers.adminer-insecure.entrypoints=http"
      - "traefik.http.routers.adminer-insecure.middlewares=adminer-redirect"

      # Redirect HTTP traffic to HTTPS
      - "traefik.http.middlewares.adminer-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.adminer-redirect.redirectscheme.permanent=true"

      # Define HTTPS router
      - "traefik.http.routers.adminer.rule=Host(`${HOSTNAME}`) && PathPrefix(`/admin`)"
      - "traefik.http.routers.adminer.entrypoints=https"
      - "traefik.http.routers.adminer.tls=true"
      - "traefik.http.routers.adminer.tls.certresolver=cert"

      # Add the service
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"

  traefik:
    image: traefik
    container_name: traefik
    restart: always
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      - "--entrypoints.psql.address=:5432"
      - "--certificatesresolvers.cert.acme.tlschallenge=${ACME_TLS_CHALLENGE}"
      - "--certificatesresolvers.cert.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.cert.acme.storage=/letsencrypt/acme.json"
    ports:
      - 80:80
      - 443:443
      - 5432:5432
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /letsencrypt:/letsencrypt

volumes:
  db-data:
  letsencrypt:
